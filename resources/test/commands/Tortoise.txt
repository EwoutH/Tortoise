# This file's main purpose is as a place to temporarily add new
# language tests during development without having to depend on
# a new NetLogoHeadlessTests artifact.  if the test you add
# here should pass on JVM NetLogo too, then before committing
# and pushing, please add the test to the NetLogo repo instead.

Smoke
  2 + 2 => 4
  netlogo-web? => true

MapExtension
  extensions [nlmap]
  globals [ basic ls str ]
  O> set basic (nlmap:from-list [["apples" 4] ["oranges" 6]])
  nlmap:to-list (nlmap:from-list []) => []
  nlmap:to-list (nlmap:from-list [["apples" 4] ["oranges" 6]]) => [["apples" 4] ["oranges" 6]]
  nlmap:to-list (nlmap:add basic "grapes" 9001) => [["apples" 4] ["oranges" 6] ["grapes" 9001]]
  nlmap:to-list (nlmap:remove basic "apples") => [["oranges" 6]]
  nlmap:to-list (nlmap:remove basic "oranges") => [["apples" 4]]
  nlmap:to-list (nlmap:remove basic "grapes") => [["apples" 4] ["oranges" 6]]
  nlmap:to-list (nlmap:remove (nlmap:add basic "grapes" 9001) "grapes") => [["apples" 4] ["oranges" 6]]
  nlmap:is-map? basic => true
  nlmap:is-map? [] => false
  nlmap:is-map? 49 => false
  nlmap:is-map? true => false
  nlmap:is-map? false => false
  nlmap:is-map? "string" => false
  nlmap:is-map? nobody => false
  nlmap:get basic "apples" => 4
  nlmap:get basic "oranges" => 6
  nlmap:get (nlmap:remove basic "apples") "oranges" => 6
  nlmap:get (nlmap:add basic "grapes" 9001) "grapes" => 9001
  nlmap:get (nlmap:add basic "grapes" 9001) "oranges" => 6
  nlmap:get (nlmap:remove (nlmap:add basic "grapes" 9001) "grapes") "apples" => 4
  nlmap:get (nlmap:remove (nlmap:add basic "grapes" 9001) "grapes") "oranges" => 6
  nlmap:get (nlmap:remove (nlmap:add basic "grapes" 9001) "apples") "grapes" => 9001
  nlmap:get (nlmap:remove (nlmap:add basic "grapes" 9001) "apples") "oranges" => 6
  O> set basic nlmap:from-json "{ \"url\": \"url\", \"obj\": { \"val1\": 100, \"val2\": \"apples\", \"val3\": [ 4, 5, 6 ] } }"
  O> set ls nlmap:to-list basic
  item 0 ls => ["url" "url"]
  item 0 item 1 ls => "obj"
  nlmap:to-list (item 1 item 1 ls) => [["val1" 100] ["val2" "apples"] ["val3" [4 5 6]]]
  O> set str nlmap:to-urlenc (nlmap:from-list [["apples" 4] ["oranges" "6 w/ spaces & 'spec.' chars"]])
  str => "apples=4&oranges=6%20w%2F%20spaces%20%26%20'spec.'%20chars"
  O> set str nlmap:to-json basic
  str => "{\"url\":\"url\",\"obj\":{\"val1\":100,\"val2\":\"apples\",\"val3\":[4,5,6]}}"

CodapExtension
  extensions [codap nlmap]
  O> codap:init ([[] ->])
  O> codap:call (nlmap:from-list [])

LoggingExtension
  extensions [logging]
  globals [apples oranges grapes]
  to do-logging-batch logging:log-message "hi" logging:log-message (word "ticks: " ticks) (logging:log-globals) (logging:log-globals "oranges" "apples" "grapes") (logging:log-globals "grapes" "oranges") tick end
  O> reset-ticks set apples 91 set grapes "howdy" set oranges false
  O> do-logging-batch
  logging:all-logs => ["hi" "ticks: 0" "apples: 91\noranges: false\ngrapes: \"howdy\"" "oranges: false\napples: 91\ngrapes: \"howdy\"" "grapes: \"howdy\"\noranges: false"]
  O> do-logging-batch
  logging:all-logs => ["hi" "ticks: 0" "apples: 91\noranges: false\ngrapes: \"howdy\"" "oranges: false\napples: 91\ngrapes: \"howdy\"" "grapes: \"howdy\"\noranges: false" "hi" "ticks: 1" "apples: 91\noranges: false\ngrapes: \"howdy\"" "oranges: false\napples: 91\ngrapes: \"howdy\"" "grapes: \"howdy\"\noranges: false"]
  O> logging:clear-logs
  O> do-logging-batch
  logging:all-logs => ["hi" "ticks: 2" "apples: 91\noranges: false\ngrapes: \"howdy\"" "oranges: false\napples: 91\ngrapes: \"howdy\"" "grapes: \"howdy\"\noranges: false"]
  O> logging:log-message "All done."
  logging:all-logs => ["hi" "ticks: 2" "apples: 91\noranges: false\ngrapes: \"howdy\"" "oranges: false\napples: 91\ngrapes: \"howdy\"" "grapes: \"howdy\"\noranges: false" "All done."]

MiniCsvExtensionStrings
  O> random-seed 5768
  extensions [mini-csv]
  globals [temp]
  mini-csv:from-string "" => []
  mini-csv:to-string [] => ""
  mini-csv:from-string "apples,oranges,1,2" => [["apples" "oranges" 1 2]]
  (mini-csv:from-string "apples|oranges|1|2" "|") => [["apples" "oranges" 1 2]]
  mini-csv:to-string [[ "apples" "oranges" 1 2 ]] => "apples,oranges,1,2"
  (mini-csv:to-string [[ "apples" "oranges,too" 1 2 ]] "|") => "apples|oranges,too|1|2"
  mini-csv:to-string [[ "apples" "oranges" 1 2 ] [ "fresas, pepinos" "uvas\nuvas" 3 4 ]] => "apples,oranges,1,2\n\"fresas, pepinos\",\"uvas\nuvas\",3,4"
  O> create-turtles 3 [ fd 20 set label "hi, how are ya?" ]
  mini-csv:to-string (list (sort turtles) ) => "(turtle 0),(turtle 1),(turtle 2)"
  O> set temp [ (list who pxcor pycor color label) ] of turtles
  mini-csv:to-string temp => "1,-3,-2,85,\"hi, how are ya?\"\n0,-4,2,85,\"hi, how are ya?\"\n2,-5,3,65,\"hi, how are ya?\""
  mini-csv:from-string mini-csv:to-string temp => [[1 -3 -2 85 "hi, how are ya?"] [0 -4 2 85 "hi, how are ya?"] [2 -5 3 65 "hi, how are ya?"]]
  mini-csv:to-string [ [ [0 1 2] [3 4 5] ] [ [6 7 8] [9 0 1] ] [ [2 3 4] [5 6 7] ] ] => "[0 1 2],[3 4 5]\n[6 7 8],[9 0 1]\n[2 3 4],[5 6 7]"
  O> set temp mini-csv:from-string "[0 1 2],[3 4 5]\n[6 7 8],[9 0 1]\n[2 3 4],[5 6 7]"
  temp => [["[0 1 2]" "[3 4 5]"] ["[6 7 8]" "[9 0 1]"] ["[2 3 4]" "[5 6 7]"]]
  map [ row -> map [ cell -> read-from-string cell ] row ] temp => [[[0 1 2] [3 4 5]] [[6 7 8] [9 0 1]] [[2 3 4] [5 6 7]]]

MiniCsvExtensionRows
  O> random-seed 5768
  extensions [mini-csv]
  globals [temp]
  mini-csv:from-row "" => []
  mini-csv:to-row [] => ""
  mini-csv:from-row "14,10,-2" => [14 10 -2]
  (mini-csv:from-row "14|10|-2" "|") => [14 10 -2]
  mini-csv:to-row [14 10 "delim,here"] => "14,10,\"delim,here\""
  (mini-csv:to-row [14 10 "delim,here"] "|") => "14|10|delim,here"
  O> create-turtles 3 [ fd 20 set label "hi, how are ya?" ]
  O> set temp [ pxcor ] of turtles
  mini-csv:to-row temp => "-3,-4,-5"
  mini-csv:from-row mini-csv:to-row temp => [-3 -4 -5]
